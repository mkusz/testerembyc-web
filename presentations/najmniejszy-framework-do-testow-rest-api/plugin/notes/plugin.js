import speakerViewHTML from"./speaker-view.html";import{marked}from"marked";const Plugin=()=>{let connectInterval,speakerWindow=null,deck;function openSpeakerWindow(){if(speakerWindow&&!speakerWindow.closed)speakerWindow.focus();else if((speakerWindow=window.open("about:blank","reveal.js - Notes","width=1100,height=700")).marked=marked,speakerWindow.document.write(speakerViewHTML),speakerWindow){const presentationURL=deck.getConfig().url,url="string"==typeof presentationURL?presentationURL:window.location.protocol+"//"+window.location.host+window.location.pathname+window.location.search;connectInterval=setInterval(function(){speakerWindow.postMessage(JSON.stringify({namespace:"reveal-notes",type:"connect",state:deck.getState(),url:url}),"*")},500),window.addEventListener("message",onPostMessage)}else alert("Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.")}function post(event){let slideElement=deck.getCurrentSlide(),notesElement=slideElement.querySelector("aside.notes"),fragmentElement=slideElement.querySelector(".current-fragment");var fragmentNotes,messageData={namespace:"reveal-notes",type:"state",notes:"",markdown:!1,whitespace:"normal",state:deck.getState()};slideElement.hasAttribute("data-notes")&&(messageData.notes=slideElement.getAttribute("data-notes"),messageData.whitespace="pre-wrap"),fragmentElement&&((fragmentNotes=fragmentElement.querySelector("aside.notes"))?notesElement=fragmentNotes:fragmentElement.hasAttribute("data-notes")&&(messageData.notes=fragmentElement.getAttribute("data-notes"),messageData.whitespace="pre-wrap",notesElement=null)),notesElement&&(messageData.notes=notesElement.innerHTML,messageData.markdown="string"==typeof notesElement.getAttribute("data-markdown")),speakerWindow.postMessage(JSON.stringify(messageData),"*")}function onPostMessage(event){var methodArguments,callId,data=JSON.parse(event.data);data&&"reveal-notes"===data.namespace&&"connected"===data.type?(clearInterval(connectInterval),onConnected()):data&&"reveal-notes"===data.namespace&&"call"===data.type&&(event=data.methodName,methodArguments=data.arguments,callId=data.callId,data=deck[event].apply(deck,methodArguments),speakerWindow.postMessage(JSON.stringify({namespace:"reveal-notes",type:"return",result:data,callId:callId}),"*"))}function onConnected(){deck.on("slidechanged",post),deck.on("fragmentshown",post),deck.on("fragmenthidden",post),deck.on("overviewhidden",post),deck.on("overviewshown",post),deck.on("paused",post),deck.on("resumed",post),post()}return{id:"notes",init:function(reveal){deck=reveal,/receiver/i.test(window.location.search)||(null!==window.location.search.match(/(\?|\&)notes/gi)?openSpeakerWindow():window.addEventListener("message",event=>{if(!speakerWindow&&"string"==typeof event.data){let data;try{data=JSON.parse(event.data)}catch(error){}data&&"reveal-notes"===data.namespace&&"heartbeat"===data.type&&(event=event.source,speakerWindow&&!speakerWindow.closed?speakerWindow.focus():(speakerWindow=event,window.addEventListener("message",onPostMessage),onConnected()))}}),deck.addKeyBinding({keyCode:83,key:"S",description:"Speaker notes view"},function(){openSpeakerWindow()}))},open:openSpeakerWindow}};export default Plugin;